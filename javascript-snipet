{
	// Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	},
	"get id": {
		"prefix": "ambilid",
		"body": "$(\"#$1\").$2",
		"description": "Log output to console"
	},
	"get class": {
		"prefix": "ambilclass",
		"body": "$(\".$1\").$2",
		"description": "Log output to console"
	},
	"ajax": {
		"prefix": "buatajax",
		"body": [
			"$.ajax({",
				"data: {$1 : $2},",
				"url: \"$2\",",
				"type: \"$3\",",
				"dataType: 'json',",
				"success: function (response) {",

				"}",
			"});",
		],
		"description": "Log output to console"
	},
	"form ajax": {
		"prefix": "formajax",
		"body": [
			"let formdata = $('#$1 $2').serializeArray();",
			"let data = {}",
			"$(formdata).each(function (index, obj) {",
				"data[obj.name] = obj.value;",
			"});",
			"$.ajax({",
				"data: $('#$3 $4').serialize(),",
				"url: \"$5\",",
				"type: \"$6\",",
				"dataType: 'json',",
				"success: function (response) {",
					"if(response.errors) {",
						"isplayErrors(response.errors);",
					"}else{",
					"",
					"}",
				"}",
			"});",
		],
		"description": "Log output to console"
	},
	"error hendler": {
		"prefix": "errorhandler",
		"body": [
			"//Hendler Error",
			"function displayErrors(errors) {",
				"// menghapus class 'is-invalid' dan pesan error sebelumnya",
				"$(\"input.form-control\").removeClass(\"is-invalid\");",
				"$(\"select.form-control\").removeClass(\"is-invalid\");",
				"$(\"div.invalid-feedback\").remove();",
		"",
				"// menampilkan pesan error baru",
				"$.each(errors, function (field, messages) {",
					"let inputElement = $(\"input[name=\" + field + \"]\");",
					"let selectElement = $(\"select[name=\" + field + \"]\");",
					"let feedbackElement = $(",
						"'<div class=\"invalid-feedback ml-2\"></div>'",
					");",
		"",
					"$.each(messages, function (index, message) {",
						"feedbackElement.append(",
							"$('<p class=\"p-0 m-0\">' + message + \"</p>\")",
						");",
					"});",
		"",
					"if (inputElement.length > 0) {",
						"inputElement.addClass(\"is-invalid\");",
						"inputElement.after(feedbackElement);",
					"}",
		"",
					"if (selectElement.length > 0) {",
						"selectElement.addClass(\"is-invalid\");",
						"selectElement.after(feedbackElement);",
					"}",
					"inputElement.each(function () {",
						"if (inputElement.attr(\"type\") == \"text\") {",
							"inputElement.on(\"click\", function () {",
								"$(this).removeClass(\"is-invalid\");",
							"});",
							"inputElement.on(\"change\", function () {",
								"$(this).removeClass(\"is-invalid\");",
							"});",
						"} else if (inputElement.attr(\"type\") == \"date\") {",
							"inputElement.on(\"change\", function () {",
								"$(this).removeClass(\"is-invalid\");",
							"});",
						"}",
					"});",
				"});",
			"}",
		],
		"description": "Log output to console"
	},
	"Datatables Init": {
		"prefix": "datatablesInit",
		"body": [
			"let table$1 = $(\"#dataTables\").DataTable({",
				"createdRow: function (row, data, index) {",
					"$(row).addClass(\"selected\");",
				"},",
				"processing: true,",
				"responsive: true,",
				"searching: true,",
				"bLengthChange: true,",
				"info: false,",
				"ordering: true,",
				"serverSide: true,",
				"ajax: \"/$2\",",
				"columnDefs: [",
					"{",
						"targets: [5], // index kolom atau sel yang ingin diatur",
						"className: \"text-center\", // kelas CSS untuk memposisikan isi ke tengah",
					"},",
				"],",
				"columns: [",
					"{",
						"render: function (data, type, row, meta) {",
							"return meta.row + meta.settings._iDisplayStart + 1;",
						"},",
					"},",
					"{",
						"data: \"$3\",",
					"},",
					"{",
						"data: \"$4\",",
					"},",
					"{",
						"data: \"$5\",",
					"},",
					"{",
						"data: \"$6\",",
					"},",
					"{",
						"data: \"action\",",
						"orderable: true,",
						"searchable: true,",
					"},",
				"],",
				"order: [[0, \"desc\"]],",
			"});",
		],
		"description": "Log output to console"
	},
	"Currency": {
		"prefix": "currency",
		"body": [
			"new Intl.NumberFormat(\"id-ID\", {",
				"style: \"currency\",",
				"currency: \"IDR\",",
				"minimumFractionDigits: 0,",
			"})",
				".format(rupiah)",
				".replace(\"Rp\", \"\")",
				".replace(/\\./g, \",\")",
				");",
		],
		"description": "Log output to console"
	},
}
